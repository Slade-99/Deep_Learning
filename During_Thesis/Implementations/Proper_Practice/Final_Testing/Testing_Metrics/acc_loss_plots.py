Swin = [ [0.3634889753566796, 0.38975356679636836, 0.3745136186770428, 0.38715953307393, 0.3946173800259403, 0.3719195849546044, 0.3835927367055772, 0.39007782101167315, 0.3842412451361868, 0.3939688715953307, 0.3968871595330739, 0.4082360570687419, 0.42153047989623865, 0.42088197146562906, 0.4296368352788586, 0.4383916990920882, 0.43190661478599224, 0.44357976653696496, 0.45460440985732814, 0.4678988326848249, 0.5084306095979247, 0.5233463035019456, 0.5366407263294423, 0.5755512321660181, 0.5940337224383917] ,
        [1.1264677671570853, 1.0996090522701876, 1.1068754001602608, 1.1018828375969527, 1.0975155401106325, 1.1036904710562119, 1.0994184032623013, 1.0967645076890067, 1.097774970716763, 1.090822035475716, 1.092854203029, 1.0880138796845866, 1.0808784804195937, 1.0787967517585952, 1.076824755866293, 1.067821413432996, 1.07557462194423, 1.064994359881149, 1.0530277064427194, 1.038938643401151, 1.012983124799679, 0.9846211446381603, 0.9617276395540781, 0.9114931114597024, 0.8940143671678138] ]
EdgeViT = [ [0.47535667963683526, 0.5732814526588845, 0.619325551232166, 0.6455901426718548, 0.685473411154345, 0.6861219195849546, 0.7250324254215305, 0.7334630350194552, 0.7383268482490273, 0.7474059662775616, 0.7571335927367056, 0.7739948119325551, 0.7837224383916991, 0.7811284046692607, 0.791828793774319, 0.8031776913099871, 0.7992866407263295, 0.8106355382619974, 0.8154993514915694, 0.8320363164721142, 0.8167963683527886, 0.8297665369649806, 0.819390402075227, 0.8226329442282749, 0.8232814526588845], 
          [1.0726628192348184, 0.929011161154416, 0.8523812314080451, 0.8239937965116353, 0.7633125987386457, 0.7454516929357163, 0.6832485405120208, 0.6661828211243288, 0.6549669496444841, 0.6151998475425602, 0.5847413332968796, 0.5659465729572613, 0.546475423664009, 0.5462386001268199, 0.5308364278448678, 0.5031313028360278, 0.5172558248892349, 0.48803731339737544, 0.4817847473247681, 0.458023621203677, 0.4717928433279299, 0.44317629593641644, 0.44993895467930506, 0.4576076140212271, 0.4398449676719354] ]
CVT = [ [0.38261997405966275, 0.3670557717250324, 0.36964980544747084, 0.3829442282749676, 0.3978599221789883, 0.4351491569390402, 0.501621271076524, 0.5175097276264592, 0.543450064850843, 0.5389105058365758, 0.5463683527885862, 0.5664721141374838, 0.5972762645914397, 0.606355382619974, 0.6147859922178989, 0.62905317769131, 0.6527237354085603, 0.6498054474708171, 0.6553177691309987, 0.6523994811932555, 0.6588845654993515, 0.6757457846952011, 0.6867704280155642, 0.6689364461738002, 0.6828793774319066], 
          [1.1897835153989842, 1.131590100767699, 1.1241845479283308, 1.1082131890435294, 1.1027762531616527, 1.0816657407296135, 1.0129755602599426, 0.9751549477404263, 0.9414470217388529, 0.9538596575124276, 0.9294780600873918, 0.8964495479751745, 0.8631429065385631, 0.8343927159210561, 0.8317618833304686, 0.8027243743906367, 0.7766577252452238, 0.770949529242639, 0.7527394098630223, 0.7530475366146453, 0.7636662732443044, 0.7156452091864354, 0.7070301397476789, 0.7200160995511811, 0.6859146569290927] ]
MobileViT_S = [[0.4691958495460441, 0.5376134889753567, 0.5810635538261998, 0.6099221789883269, 0.6368352788586251, 0.6689364461738002, 0.7146562905317769, 0.7318417639429312, 0.7652399481193255, 0.7772373540856031, 0.7827496757457847, 0.8038261997405967, 0.8206874189364461, 0.8226329442282749, 0.8297665369649806, 0.8330090791180286, 0.8268482490272373, 0.8476005188067445, 0.85473411154345, 0.8534370946822308, 0.8524643320363164, 0.8453307392996109, 0.8690012970168612, 0.8498702983138781, 0.8628404669260701], 
          [1.0373504334780836, 0.9695758291476749, 0.9157147234585619, 0.8648996362414385, 0.8173195620892579, 0.7593584681421982, 0.6844634299451205, 0.6541949428733767, 0.6070443161719822, 0.5574060727123151, 0.5409846545964325, 0.49350242679600886, 0.46246908917791485, 0.4582524579500905, 0.43125836335006773, 0.4285247581842032, 0.4488743269536162, 0.4103062048245588, 0.3869106453394643, 0.38962859976940206, 0.38601167164163885, 0.3883725091081518, 0.345690577566006, 0.36870132274732687, 0.35880184644553326] ]
MobileNet_V2_S = [ [0.4351491569390402, 0.48476005188067445, 0.4996757457846952, 0.5171854734111544, 0.5077821011673151, 0.5392347600518806, 0.5366407263294423, 0.5424773022049286, 0.5502594033722439, 0.5687418936446174, 0.5862516212710766, 0.5674448767833982, 0.5959792477302205, 0.6034370946822308, 0.6027885862516212, 0.619325551232166, 0.6248378728923476, 0.6335927367055771, 0.6413748378728924, 0.6475356679636836, 0.6653696498054474, 0.6553177691309987, 0.6754215304798963, 0.6913099870298314, 0.6900129701686122], 
          [1.0731344581267994, 1.0294722259971145, 1.0227396414069931, 0.9904259597699259, 0.9917859694500661, 0.9777660990626084, 0.9735813344698496, 0.9555409186244629, 0.9418698750011661, 0.9244571300368235, 0.9125824087333185, 0.9159995873357348, 0.8847641518696602, 0.8724991753311355, 0.8727591593648486, 0.8523938848873495, 0.8270794079093735, 0.8299834010205738, 0.8182867757705827, 0.7992003181746586, 0.7798567581053225, 0.7895020141502737, 0.7604596841829429, 0.736856720453717, 0.7262972668971422] ]




import numpy as np
import matplotlib.pyplot as plt

# Define model names
models = ["Swin", "EdgeViT", "CVT", "MobileViT_S", "MobileNet_V2_S"]

# List of all accuracy and loss values (Assuming these are defined somewhere in your code)
Accuracy_Loss = [Swin, EdgeViT, CVT, MobileViT_S, MobileNet_V2_S]

# Function to apply moving average smoothing
def exp_smooth_curve(data, alpha=0.3):
    smoothed = [data[0]]
    for i in range(1, len(data)):
        smoothed.append(alpha * data[i] + (1 - alpha) * smoothed[i - 1])
    return smoothed

# Create a figure and set up the subplots (2 rows, 1 column)
plt.figure(figsize=(10, 10))

# First subplot: Accuracy
plt.subplot(2, 1, 1)  # (rows, columns, subplot index)
for i, model in enumerate(Accuracy_Loss):
    smoothed_accuracy = exp_smooth_curve(model[0])  # Applying smoothing on the accuracy data
    plt.plot(range(1, 26), smoothed_accuracy, label=models[i])

plt.xlabel("Epochs\n(a)", fontsize=14, fontweight='bold')
plt.ylabel("Accuracy", fontsize=14, fontweight='bold')

# Set legend with larger and bold fonts
plt.legend(fontsize=12, prop={'weight': 'bold', 'size': '12'})

# Add grid
plt.grid()

# Second subplot: Loss
plt.subplot(2, 1, 2)  # (rows, columns, subplot index)
for i, model in enumerate(Accuracy_Loss):
    smoothed_loss = exp_smooth_curve(model[1])  # Applying smoothing on the loss data
    plt.plot(range(1, 26), smoothed_loss, label=models[i])

plt.xlabel("Epochs\n(b)", fontsize=14, fontweight='bold')
plt.ylabel("Loss", fontsize=14, fontweight='bold')

# Set legend with larger and bold fonts
plt.legend(fontsize=12, prop={'weight': 'bold', 'size': '12'})

# Add grid
plt.grid()

# Adjust the space between subplots
plt.tight_layout()

# Show the plot
plt.show()